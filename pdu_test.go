package main

import (
	"fmt"
	"testing"
)

func TestBindFromRawData(t *testing.T) {
	data := []byte{0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x53, 0x4D, 0x50, 0x50, 0x33, 0x54, 0x45, 0x53, 0x54, 0x00,
		0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x30, 0x38, 0x00, 0x53, 0x55, 0x42, 0x4D, 0x49, 0x54, 0x31, 0x00, 0x00, 0x01, 0x01, 0x00}

	pdu := RawPdu(data)
	if pdu.commandLength != 47 {
		t.Error("Expected pdu.command_length 47", pdu.commandLength)
	}

	if pdu.complete == false {
		t.Error("Expected pdu.complete = true got", pdu.complete)
	}

	if pdu.commandId == PDU_COMMAND_BIND_RX {
		t.Error("Expected bind command", pdu.commandId)
	}

	system_id := "SMPP3TEST"
	if string(pdu.systemId) != system_id {
		t.Error("Expected system_id xxx got", pdu.systemId)
	}

	password := "secret08"
	if string(pdu.password) != password {
		t.Error(fmt.Sprintf("Expected system_id %s got", password), string(pdu.password))
	}

	system_type := "SUBMIT1"
	if string(pdu.systemType) != system_type {
		t.Error(fmt.Sprintf("Expected system_id %s got", system_type), string(pdu.systemType))
	}

	address_range := ""
	if string(pdu.address_range) != address_range {
		t.Error(fmt.Sprintf("Expected system_id %s got", address_range), string(pdu.address_range))
	}

}

func TestIncomplete(t *testing.T) {
	data := []byte{0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x53, 0x4D, 0x50, 0x50, 0x33, 0x54, 0x45, 0x53, 0x54, 0x00,
		0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x30, 0x38, 0x00, 0x53, 0x55, 0x42, 0x4D, 0x49, 0x54, 0x31, 0x00, 0x00, 0x01}

	pdu := RawPdu(data)

	if pdu.complete == true {
		t.Error("Expected incomplete PDU got", pdu.complete)
	}

	if pdu.commandId == PDU_COMMAND_BIND_RX {
		t.Error("Expected bind command", pdu.commandId)
	}

}

func TestPackString(t *testing.T) {
	var buf []byte
	data := []byte("Test")
	if len(data) != 4 {
		t.Error("Expected 4 byte array got", len(data))
	}

	appendCOctetString(&buf, data)
	if len(buf) != 5 {
		t.Error("Expected 4 byte array got", len(buf))
	}
}

func TestCreateBindPacket(t *testing.T) {
	data := []byte{0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x53, 0x4D, 0x50, 0x50, 0x33, 0x54, 0x45, 0x53, 0x54, 0x00,
		0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x30, 0x38, 0x00, 0x53, 0x55, 0x42, 0x4D, 0x49, 0x54, 0x31, 0x00, 0x00, 0x01, 0x01, 0x00}

	pdu := Bind(1, PDU_COMMAND_BIND_TX, "SMPP3TEST", "secret08", "SUBMIT1", 0, 1, 1, "")
	packet := pdu.Pack()

	if len(packet) != 47 {
		t.Error("Expected packet length 47 got", len(packet))
	}

	if string(data) != string(packet) {
		t.Error("Expected packet to match got ", string(packet))
	}
}

func TestSubmitSMFromRawData(t *testing.T) {
	data := []byte{
		0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x02, 0x08,
		0x35, 0x35, 0x35, 0x00, 0x01, 0x01,
		0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F,
		0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x69, 0x6B, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61,
		0x00, 0x05, 0x00, 0x01, 0x03} // TLV Optional Parameter: dest_addr_subunit

	pdu := RawPdu(data)

	short_message := "Hello wikipedia"

	if pdu.commandLength != 65 {
		t.Error("Expected pdu.command_length 65", pdu.commandLength)
	}

	if pdu.complete == false {
		t.Error("Expected pdu.complete = true got", pdu.complete)
	}

	if string(pdu.shortMessage) != short_message {
		t.Error(fmt.Sprintf("Expected short_message to match %s got ", short_message), string(pdu.shortMessage))
	}

	dest_addr_subunit := pdu.getOptionalParameter(PDU_OPT_PARAM_DEST_ADDR_SUBUNIT)
	if dest_addr_subunit[0] != 0x03 {
		t.Error(fmt.Sprintf("Expected dest_addr_subunit to match %x got ", 0x03), dest_addr_subunit)
	}

}

func TestCreateSubmitSMF(t *testing.T) {

	data := []byte{0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
		0x02, 0x08, 0x35, 0x35, 0x35, 0x00, 0x01, 0x01, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0F, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77,
		0x69, 0x6B, 0x69, 0x70, 0x65, 0x64, 0x69, 0x61, 0x00, 0x05, 0x00, 0x01, 0x03}

	dataHex := fmt.Sprintf("%x", data)

	pdu := SubmitSM(5, "", 2, 8, "555", 1, 1, "555555555", 3, 0, "Hello wikipedia")
	pdu.setOptionalParameter(PDU_OPT_PARAM_DEST_ADDR_SUBUNIT, []byte{0x03})

	packet := pdu.Pack()

	packetHex := fmt.Sprintf("%x", packet)

	if dataHex != packetHex {
		t.Error(fmt.Sprintf("Packet different from expected \n %s\n", dataHex), packetHex)
	}
}

func TestBindResp(t *testing.T) {
	data := []byte{0x00, 0x00, 0x00, 0x11,
		0x80, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01,
		0x00}
	pdu := RawPdu(data)
	if pdu.commandId != PDU_COMMAND_RESP+PDU_COMMAND_BIND_TX {
		t.Error("Expected command id TX RESP got ", pdu.commandId)
	}
	if string(pdu.systemType) != "" {
		t.Error("Expected system type empty string got", string(pdu.systemType))
	}
}

func TestSubmitSMResp(t *testing.T) {
	data := []byte{0x00, 0x00, 0x00, 0x21,
		0x80, 0x00, 0x00, 0x04,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x02,
		0x36, 0x37, 0x39, 0x32,
		0x37, 0x39, 0x35, 0x34,
		0x34, 0x36, 0x37, 0x34,
		0x37, 0x38, 0x31, 0x36, 0x00}
	pdu := RawPdu(data)
	msgId := "6792795446747816"
	if string(pdu.Message_id) != msgId {
		t.Error(fmt.Sprintf("Expected message id %s got", msgId), string(pdu.Message_id))
	}
}
